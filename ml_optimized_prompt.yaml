prompt:
  - "Input: resume.pdf, JD.pdf, template.yaml"

  # ML-ATS OPTIMIZATION RULES
  "ML-ATS SCORING RULES (Target: 90+ score):",
  "- Keyword Match (30% weight): Integrate all JD keywords exactly as they appear",
  "- Skills Relevance (25% weight): Contextual skill usage > keyword stuffing",
  "- Experience Achievements (25% weight): Achievement-first language with metrics",
  "- Formatting (10% weight): Perfect contact info + 3 essential sections",
  "- Extra Sections (10% weight): Include 4+ sections (summary, projects, certifications, technologies)",

  # SEMANTIC SIMILARITY OPTIMIZATION
  "SEMANTIC ENHANCEMENT STRATEGIES:",
  "- Use skill variations: e.g., 'machine learning' AND 'ML'",
  "- Create contextual skill pairs: 'Python for data manipulation'",
  "- Include action-skill combinations: 'orchestrated using LangChain'",
  "- Add domain context: 'AI in healthcare applications'",
  "- Semantic similarity target: 75%+ (current: 63.4%)",

  # YAML STRICT RULES
  "YAML STRICT RULES:",
  "- Colons (:) only for YAML separators. Forbidden in content text.",
  "- Replace content colons with connectors (and, with, for, by, including).",
  "- summary: must be a single bullet with one paragraph.",
  "- Skills: use 'details:' only, never 'summary:'.",
  "- Dates format: YYYY-MM, lowercase 'present'.",
  "- No fabricated dates. If start/end not in resume, omit them.",
  "- Standardize: 'Computer Science Engineering', certifications without colons.",
  "- Degrees must use short form (e.g., Bachelor of Technology → BTech).",
  "- Only include university-level degrees (Bachelor, Master, PhD).",
  "- No placeholders. No contact info.",
  "- Any mention of position of responsibility must be shifted to 'achievements:' with a brief explanation.",

  # STRICT ONE-PAGE RULE
  "- Resume must strictly fit one page in YAML export.",
  "- If content exceeds one page, aggressively shorten summary and experience bullets.",
  "- Shorten by removing filler words and redundant phrases but keep:",
  "  • All JD keywords (95% required + 90% preferred).",
  "  • CAR structure (Challenge–Action–Result).",
  "  • Quantified outcomes (numbers, %, metrics).",
  "- If space still exceeds one page:",
  "  • Prioritize JD keywords and quantified achievements over generic soft skills.",
  "  • Condense 2–3 related bullets into one concise CAR bullet with denser keyword usage.",
  "  • Shorten the summary first before cutting experience points.",
  "- No loss of required keywords or ATS alignment even when shortening.",

  # KEYWORD INTEGRATION - ML ENHANCED
  "Extract all the keywords from the JSON file and include them in the resume, it's a must.",
  "SEMANTIC KEYWORD INTEGRATION:",
  "- Don't just list skills - show them in action:",
  "  ❌ 'Skills: Python, LangChain'",
  "  ✅ 'Orchestrated real-time data retrieval using LangChain and Python'",
  "- Create skill chains: 'developed AI agents using LangChain for automation'",
  "- Add contextual modifiers: 'machine learning for healthcare applications'",
  "- Use both technical and business terms together",

  "JD KEYWORDS (95%+ integration required):",
  "- Python (3–6 months req → resume shows 9+ months expert).",
  "- ML libraries (TensorFlow, OpenCV, scikit-learn).",
  "- AI orchestration (LangChain, CrewAI, Phidata).",
  "- AI agents, agentic systems/workflows.",
  "- SQL, ETL, data manipulation, preprocessing.",
  "- Healthcare applications, clinical outcomes, operational efficiency.",
  "- Analytical, problem-solving, teamwork, communication.",

  "Preferred Skills (90%+ where applicable):",
  "- Cloud platforms (Azure + mention AWS/GCP).",
  "- Data visualization (Matplotlib, Seaborn, Plotly).",
  "- DevOps/model deployment (Docker, production).",
  "- Version control (Git).",

  # ACHIEVEMENT-FIRST WRITING STYLE
  "ACHIEVEMENT OPTIMIZATION (Current: 20/25 → Target: 23+/25):",
  "- Start every bullet with QUANTIFIED ACHIEVEMENT",
  "- Structure: [Metric + Achievement] using [Skill] for [Business Impact]",
  "- Examples:",
  "  ❌ 'Developed a system using LangChain'",
  "  ✅ 'Enhanced operational efficiency by 30% through LangChain-based AI orchestration'",
  "  ✅ 'Reduced manual intervention by 25% using Phidata agentic systems'",
  "- Include 2-3 metrics per bullet where possible",
  "- Add business impact statements",

  # SUMMARY ENHANCEMENT
  "Summary must integrate 25–30 JD keywords naturally in one paragraph.",
  "- Use semantic variations: e.g., 'AI orchestration frameworks such as LangChain'",
  "- Include both technical and business keywords",
  "- Show progression: 'from X to Y achievements'",
  "- If too long, shorten while preserving keywords and role relevance.",

  # EXPERIENCE BULLET OPTIMIZATION
  "BULLET ENHANCEMENT STRATEGIES:",
  "- Each bullet must have:",
  "  1. Quantifiable result (20%, 30%, $X)",
  "  2. Technical skills used (LangChain, Python)",
  "  3. Business impact (efficiency, revenue, accuracy)",
  "  4. JD keyword integration",
  "- Target: 8-10 JD keywords per bullet",
  "- Use power verbs: Orchestrated, Developed, Engineered, Leveraged",

  # PROJECT SECTION ENHANCEMENT
  "PROJECT OPTIMIZATION:",
  "- Frame projects as solutions to business problems",
  "- Include: Challenge → Solution → Impact → Skills Used",
  "- Add metrics even if estimated: 'improving efficiency by ~25%'",
  "- Connect to JD domains: 'similar to healthcare AI systems'",

  # OUTPUT VALIDATION - ML FOCUSED
  "ML-ATS CHECKLIST before output:",
  "✓ All 20 JD skills integrated contextually",
  "✓ Semantic similarity > 70% (use keyword variations)",
  "✓ Every bullet starts with achievement + metric",
  "✓ 5+ sections detected (summary, experience, projects, technologies, certifications)",
  "✓ Skills shown in action, not just listed",
  "✓ Healthcare/efficiency context maintained throughout",
  "✓ Achievement sentences detected by NLP (target: 5+)",
  "✓ YAML format clean (no colons in content)",
  "✓ One page with optimal keyword density",
  "✓ No fabricated dates or achievements",

  "Final Output: resume.yaml fully ML-ATS optimized, targeting 90+ score with 75%+ semantic similarity"