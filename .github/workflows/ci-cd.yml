name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
  pages: write
  actions: read

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock httpx
        
    - name: Create test PDF files
      run: |
        mkdir -p test_files
        echo "%PDF-1.4
        1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
        2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj  
        3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj
        4 0 obj<</Length 44>>stream
        BT/F1 12 Tf 72 720 Td(Test Resume Content)Tj ET
        endstream endobj
        xref 0 5
        0000000000 65535 f
        0000000009 00000 n  
        0000000058 00000 n
        0000000115 00000 n
        0000000274 00000 n
        trailer<</Size 5/Root 1 0 R>>
        startxref 350
        %%EOF" > test_files/test_resume.pdf
        
        echo "%PDF-1.4
        1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
        2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj  
        3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj
        4 0 obj<</Length 44>>stream
        BT/F1 12 Tf 72 720 Td(Test Job Description)Tj ET
        endstream endobj
        xref 0 5
        0000000000 65535 f
        0000000009 00000 n  
        0000000058 00000 n
        0000000115 00000 n
        0000000274 00000 n
        trailer<</Size 5/Root 1 0 R>>
        startxref 350
        %%EOF" > test_files/test_jd.pdf
        
    - name: Run unit tests
      run: |
        pytest test_ats_system.py -v --cov=ats_system --cov-report=xml --cov-report=html
        
    - name: Run FastAPI tests
      run: |
        pytest test_ats_server.py -v --cov=atsServer --cov-append --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
        
    - name: Run Black (code formatter)
      run: |
        black --check --diff *.py
        
    - name: Run isort (import sorter)
      run: |
        isort --check-only --diff *.py
        
    - name: Run flake8 (linter)
      run: |
        flake8 *.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 *.py --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run mypy (type checker)
      run: |
        mypy *.py --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true
        
    - name: Run Safety check
      run: |
        safety check --json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Convert repository name to lowercase
      id: lowercase
      run: |
        echo "repository=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.repository }}:latest
          ghcr.io/${{ steps.lowercase.outputs.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create basic documentation
      run: |
        mkdir -p docs
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>ATS Resume Analyzer</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                .header { text-align: center; margin-bottom: 40px; }
                .section { margin-bottom: 30px; }
                .code { background-color: #f4f4f4; padding: 10px; border-radius: 5px; }
                .endpoint { background-color: #e8f5e8; padding: 15px; border-radius: 5px; margin: 10px 0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üéØ ATS Resume Analyzer</h1>
                <p>AI-powered ATS compatibility analysis for resumes and job descriptions</p>
            </div>
            
            <div class="section">
                <h2>üìã Overview</h2>
                <p>The ATS Resume Analyzer is a FastAPI-based service that helps job seekers optimize their resumes for Applicant Tracking Systems (ATS). Upload your resume and job description PDFs to get detailed compatibility analysis.</p>
            </div>
            
            <div class="section">
                <h2>üöÄ API Endpoints</h2>
                
                <div class="endpoint">
                    <h3>GET /health</h3>
                    <p>Health check endpoint to verify the service is running.</p>
                </div>
                
                <div class="endpoint">
                    <h3>POST /analyze</h3>
                    <p>Upload resume and job description PDFs for ATS compatibility analysis.</p>
                    <p><strong>Parameters:</strong></p>
                    <ul>
                        <li><code>resume_file</code> - PDF file of the resume</li>
                        <li><code>jd_file</code> - PDF file of the job description</li>
                    </ul>
                </div>
            </div>
            
            <div class="section">
                <h2>üõ†Ô∏è Features</h2>
                <ul>
                    <li>PDF text extraction from resumes and job descriptions</li>
                    <li>Skills matching with semantic analysis</li>
                    <li>Contact information validation</li>
                    <li>Keyword coverage analysis</li>
                    <li>Detailed scoring and recommendations</li>
                </ul>
            </div>
            
            <div class="section">
                <h2>üìä Response Format</h2>
                <p>The API returns a comprehensive JSON analysis including:</p>
                <ul>
                    <li>Overall ATS score (0-100)</li>
                    <li>Component breakdowns (skills, formatting, keywords)</li>
                    <li>Matched and missing skills</li>
                    <li>Improvement recommendations</li>
                </ul>
            </div>
            
            <div class="section">
                <h2>üîó Repository</h2>
                <p>Source code: <a href="https://github.com/GriffinBlackbirdd/ATS" target="_blank">https://github.com/GriffinBlackbirdd/ATS</a></p>
            </div>
            
            <div class="section">
                <p style="text-align: center; color: #666; font-size: 14px;">
                    Generated automatically by CI/CD pipeline
                </p>
            </div>
        </body>
        </html>
        EOF
      
    - name: Deploy to GitHub Pages (Documentation)
      uses: peaceiris/actions-gh-pages@v4
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
      
    # Add your deployment steps here
    # Examples:
    # - Deploy to Heroku
    # - Deploy to AWS
    # - Deploy to Google Cloud
    # - Deploy to Azure
    # - Deploy to your own server
    
  notification:
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, deploy]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo "Tests passed, code quality checks passed, security scans completed."
        
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "‚ùå CI/CD Pipeline failed!"
        echo "Please check the logs and fix the issues."
        exit 1